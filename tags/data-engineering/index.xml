<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data-engineering on LC</title>
    <link>https://l1990790120.github.io/tags/data-engineering/</link>
    <description>Recent content in data-engineering on LC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Apr 2020 22:12:59 -0500</lastBuildDate>
    
	<atom:link href="https://l1990790120.github.io/tags/data-engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Local Data Analytics Stack (Airflow &#43; Superset)</title>
      <link>https://l1990790120.github.io/post/2020-04-08-local-airflow-from-scratch/</link>
      <pubDate>Wed, 08 Apr 2020 22:12:59 -0500</pubDate>
      
      <guid>https://l1990790120.github.io/post/2020-04-08-local-airflow-from-scratch/</guid>
      <description>At work, the BI environment is often setup and ready to go. At home, when I need to do data analysis myself, it really helps if there&amp;rsquo;s data pipeline and visualization tools ready to go. Over time, I&amp;rsquo;ve developed my go-to open source data analytics stack that runs on my local machine. The repo: https://github.com/l1990790120/local-data-stack is self-contained. In this post, I&amp;rsquo;ll share a bit more details on how it works and how to use it.</description>
    </item>
    
    <item>
      <title>The Differences in Scaling Machine Learning and ETL Pipelines</title>
      <link>https://l1990790120.github.io/post/2020-02-01-scaling-machine-learning-vs-data-pipeline/</link>
      <pubDate>Sat, 01 Feb 2020 15:20:10 +0000</pubDate>
      
      <guid>https://l1990790120.github.io/post/2020-02-01-scaling-machine-learning-vs-data-pipeline/</guid>
      <description>Data engineers rarely have a say in what&amp;rsquo;s coming in the systems we&amp;rsquo;ve built. This presents great challenges where data systems often need to be tolerant about unseen events and at the same time have extra monitoring or QA processes to allow human to determine if the exception actually signals a broader system failure. Machine learning systems have brought this challenge to a new level - in data pipelines, system failures are mostly deterministic or at least reproducible when certain conditions are met.</description>
    </item>
    
    <item>
      <title>What&#39;s Shared in Good Data Pipelines?</title>
      <link>https://l1990790120.github.io/post/2018-04-21-good-data-pipelines/</link>
      <pubDate>Sat, 21 Apr 2018 15:20:10 +0000</pubDate>
      
      <guid>https://l1990790120.github.io/post/2018-04-21-good-data-pipelines/</guid>
      <description>Planning resources for data systems usually involves more than a load balancer, in many data processing pipelines, it’s common to see some of the steps are more resource demanding while others are simple and quick, some needs to be happened in a specific setup (say a spark cluster as opposed to a linux box with python installed) while others don’t.
Here are some things to think about when you are building or trying to improve existing data processing pipelines.</description>
    </item>
    
  </channel>
</rss>